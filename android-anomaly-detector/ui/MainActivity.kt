package com.yourpackage.anomalydetector.ui

import android.Manifest
import android.app.AlertDialog
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import com.yourpackage.anomalydetector.R
import com.yourpackage.anomalydetector.data.models.DetectedDevice
import com.yourpackage.anomalydetector.domain.detector.MovementAnomalyDetector
import com.yourpackage.anomalydetector.utils.toReadableDistance
import com.yourpackage.anomalydetector.utils.toReadableSpeed
import com.yourpackage.anomalydetector.utils.toReadableTime

class MainActivity : AppCompatActivity() {
    
    private val anomalyDetector = MovementAnomalyDetector()
    
    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    private lateinit var statusText: TextView
    private lateinit var statsText: TextView
    private lateinit var startTestButton: Button
    private lateinit var clearDataButton: Button
    private lateinit var showSessionsButton: Button
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private val LOCATION_PERMISSION_REQUEST_CODE = 1001
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        initializeViews()
        setupClickListeners()
        checkPermissions()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        startPeriodicCleanup()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        startStatsUpdater()
    }
    
    private fun initializeViews() {
        statusText = findViewById(R.id.statusText)
        statsText = findViewById(R.id.statsText)
        startTestButton = findViewById(R.id.startTestButton)
        clearDataButton = findViewById(R.id.clearDataButton)
        showSessionsButton = findViewById(R.id.showSessionsButton)
        
        updateStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    }
    
    private fun setupClickListeners() {
        startTestButton.setOnClickListener {
            startTestScenario()
        }
        
        clearDataButton.setOnClickListener {
            clearAllData()
        }
        
        showSessionsButton.setOnClickListener {
            showActiveSessions()
        }
    }
    
    private fun requiredPermissions(): Array<String> {
        val permissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )
        
        // Android 12+ (API 31+) —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Bluetooth
        if (Build.VERSION.SDK_INT >= 31) {
            permissions.add(Manifest.permission.BLUETOOTH_SCAN)
            permissions.add(Manifest.permission.BLUETOOTH_CONNECT)
        }
        
        // Android 13+ (API 33+) —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è Wi-Fi
        if (Build.VERSION.SDK_INT >= 33) {
            permissions.add("android.permission.NEARBY_WIFI_DEVICES")
        }
        
        return permissions.toTypedArray()
    }
    
    private fun checkPermissions() {
        val missingPermissions = requiredPermissions().filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }
        
        if (missingPermissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(
                this, 
                missingPermissions.toTypedArray(), 
                LOCATION_PERMISSION_REQUEST_CODE
            )
        } else {
            updateStatus("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        }
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int, 
        permissions: Array<out String>, 
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        when (requestCode) {
            LOCATION_PERMISSION_REQUEST_CODE -> {
                val allGranted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }
                if (allGranted) {
                    updateStatus("–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                } else {
                    updateStatus("–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º")
                    showPermissionExplanation()
                }
            }
        }
    }
    
    private fun showPermissionExplanation() {
        AlertDialog.Builder(this)
            .setTitle("–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            .setMessage("–î–ª—è —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞:\n" +
                    "‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)\n" +
                    "‚Ä¢ Bluetooth (–¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n" +
                    "‚Ä¢ Wi-Fi (–¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤)")
            .setPositiveButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å") { _, _ -> checkPermissions() }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    fun onDeviceDetected(
        macAddress: String, 
        lat: Double, 
        lon: Double, 
        deviceType: String,
        accuracyMeters: Float? = null
    ) {
        val device = DetectedDevice(
            macAddress = macAddress,
            latitude = lat,
            longitude = lon,
            timestamp = System.currentTimeMillis(),
            deviceClass = deviceType,
            accuracyMeters = accuracyMeters
        )
        
        Log.d("DeviceDetection", 
            "Detected: $macAddress at ($lat, $lon), accuracy: ${accuracyMeters}m, type: $deviceType")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        val anomalyResult = anomalyDetector.processDetectedDevice(device)
        
        anomalyResult?.let { result ->
            if (result.isAnomalous) {
                showAnomalyAlert(result.message)
                Log.w("AnomalyDetector", result.message)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                updateStatus("–ê–ù–û–ú–ê–õ–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast
                Toast.makeText(this, "–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ!", Toast.LENGTH_LONG).show()
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateStatsDisplay()
    }
    
    private fun showAnomalyAlert(message: String) {
        runOnUiThread {
            AlertDialog.Builder(this)
                .setTitle("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è")
                .setMessage(message)
                .setPositiveButton("OK") { dialog, _ -> 
                    dialog.dismiss()
                    updateStatus("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                }
                .setNeutralButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Å—Å–∏–∏") { dialog, _ ->
                    dialog.dismiss()
                    showActiveSessions()
                }
                .setCancelable(false)
                .show()
        }
    }
    
    private fun updateStatus(status: String) {
        runOnUiThread {
            statusText.text = "–°—Ç–∞—Ç—É—Å: $status"
        }
    }
    
    private fun updateStatsDisplay() {
        runOnUiThread {
            val stats = anomalyDetector.getDetectorStats()
            val statsString = buildString {
                appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞:")
                appendLine("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.activeSessions}")
                appendLine("–ü–µ—à–∏—Ö: ${stats.walkingSessions}")
                appendLine("–ù–∞ –∞–≤—Ç–æ: ${stats.drivingSessions}")
                appendLine("–° –∞–ª–µ—Ä—Ç–∞–º–∏: ${stats.alertedSessions}")
                appendLine("–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${stats.totalDistanceTracked.toReadableDistance()}")
            }
            statsText.text = statsString
        }
    }
    
    private fun startTestScenario() {
        updateStatus("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...")
        startTestButton.isEnabled = false
        
        lifecycleScope.launch {
            try {
                runTestScenario()
            } catch (e: Exception) {
                Log.e("TestScenario", "Error in test scenario", e)
                updateStatus("–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            } finally {
                startTestButton.isEnabled = true
            }
        }
    }
    
    private suspend fun runTestScenario() {
        val testMac = "AA:BB:CC:DD:EE:FF"
        
        updateStatus("–¢–µ—Å—Ç: –ø–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ...")
        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ - –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞
        onDeviceDetected(testMac, 55.7539, 37.6208, "Wi-Fi", 15f)
        delay(2000)
        
        updateStatus("–¢–µ—Å—Ç: –º–µ–ª–∫–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)...")
        // –°–µ—Ä–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π (< 10–º) - –¥–æ–ª–∂–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        onDeviceDetected(testMac, 55.7540, 37.6209, "Wi-Fi", 12f)
        delay(1000)
        
        onDeviceDetected(testMac, 55.7541, 37.6210, "Wi-Fi", 18f)
        delay(1000)
        
        updateStatus("–¢–µ—Å—Ç: –∑–Ω–∞—á–∏–º–æ–µ –ø–µ—à–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ...")
        // –ó–Ω–∞—á–∏–º–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ - –∫ –ë–æ–ª—å—à–æ–º—É —Ç–µ–∞—Ç—Ä—É (~500–º)
        onDeviceDetected(testMac, 55.7596, 37.6189, "Wi-Fi", 25f)
        delay(3000)
        
        updateStatus("–¢–µ—Å—Ç: –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...")
        // –ï—â–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ - –∫ –º–µ—Ç—Ä–æ –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è (~300–º)
        onDeviceDetected(testMac, 55.7587, 37.6212, "Wi-Fi", 20f)
        delay(2000)
        
        updateStatus("–¢–µ—Å—Ç: –±–æ–ª—å—à–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏—é)...")
        // –ë–æ–ª—å—à–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ - –∫ –ü–∞—Ä–∫—É –ì–æ—Ä—å–∫–æ–≥–æ (~3–∫–º –æ—Ç –Ω–∞—á–∞–ª–∞)
        // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ø–æ—Ä–æ–≥ –≤ 1–∫–º –¥–ª—è –ø–µ—à–µ–≥–æ —Ö–æ–¥–∞ –∏ –≤—ã–∑–≤–∞—Ç—å –û–î–ù–û–†–ê–ó–û–í–´–ô –∞–ª–µ—Ä—Ç
        onDeviceDetected(testMac, 55.7312, 37.6016, "Wi-Fi", 30f)
        delay(1000)
        
        updateStatus("–¢–µ—Å—Ç: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ (–∞–ª–µ—Ä—Ç –ù–ï –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å)...")
        // –ï—â–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–ª–µ—Ä—Ç–∞ - –∞–ª–µ—Ä—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è
        onDeviceDetected(testMac, 55.7300, 37.6000, "Wi-Fi", 35f)
        delay(1000)
        
        updateStatus("–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    }
    
    private fun clearAllData() {
        AlertDialog.Builder(this)
            .setTitle("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            .setMessage("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö –∏ –∞–Ω–æ–º–∞–ª–∏—è—Ö?")
            .setPositiveButton("–î–∞") { _, _ ->
                anomalyDetector.reset()
                updateStatsDisplay()
                updateStatus("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
                Toast.makeText(this, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }
    
    private fun showActiveSessions() {
        val sessions = anomalyDetector.getAllActiveSessions()
        
        if (sessions.isEmpty()) {
            AlertDialog.Builder(this)
                .setTitle("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
                .setMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                .setPositiveButton("OK", null)
                .show()
            return
        }
        
        val sessionInfo = buildString {
            appendLine("üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (${sessions.size}):")
            appendLine()
            
            sessions.forEachIndexed { index, session ->
                appendLine("${index + 1}. MAC: ${session.macAddress}")
                appendLine("   –¢–∏–ø: ${getMovementTypeText(session.currentMovementType)}")
                appendLine("   –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${session.totalDistance.toReadableDistance()}")
                appendLine("   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${session.averageSpeed.toReadableSpeed()}")
                appendLine("   –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: ${session.maxSpeed.toReadableSpeed()}")
                appendLine("   –ê–ª–µ—Ä—Ç: ${if (session.alerted) "–°—Ä–∞–±–æ—Ç–∞–ª" else "–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª"}")
                
                val duration = session.lastActivityTime - session.startTime
                appendLine("   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration.toReadableTime()}")
                appendLine()
            }
        }
        
        AlertDialog.Builder(this)
            .setTitle("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
            .setMessage(sessionInfo)
            .setPositiveButton("OK", null)
            .setNeutralButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ") { _, _ -> clearAllData() }
            .show()
    }
    
    private fun getMovementTypeText(type: com.yourpackage.anomalydetector.domain.enums.MovementType): String {
        return when (type) {
            com.yourpackage.anomalydetector.domain.enums.MovementType.WALKING -> "–ü–µ—à–∫–æ–º"
            com.yourpackage.anomalydetector.domain.enums.MovementType.DRIVING -> "–ù–∞ –∞–≤—Ç–æ"
        }
    }
    
    private fun startPeriodicCleanup() {
        lifecycleScope.launch {
            while (true) {
                delay(5 * 60 * 1000L) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                anomalyDetector.cleanOldRecords()
                Log.d("Cleanup", "Periodic cleanup completed")
            }
        }
    }
    
    private fun startStatsUpdater() {
        lifecycleScope.launch {
            while (true) {
                updateStatsDisplay()
                delay(1000L) // –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            }
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        anomalyDetector.cleanOldRecords()
        Log.d("MainActivity", "Activity destroyed, cleanup completed")
    }
    
    override fun onPause() {
        super.onPause()
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    override fun onResume() {
        super.onResume()
        updateStatsDisplay()
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    }
}
